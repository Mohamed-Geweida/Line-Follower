
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000422  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c86  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000666  00000000  00000000  0000123a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000075a  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000484  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d8  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  64:	0c 94 0f 02 	jmp	0x41e	; 0x41e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <L298N_Init>:
	DIO_u8_SetPinValue(DIO_u8PORTD, IN4, DIO_u8Pin_Low);
}

void MotorB_Backward(void) {
	DIO_u8_SetPinValue(DIO_u8PORTD, IN3, DIO_u8Pin_Low);
	DIO_u8_SetPinValue(DIO_u8PORTD, IN4, DIO_u8Pin_High);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_u8_SetPinDirection>
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_u8_SetPinDirection>
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	63 e0       	ldi	r22, 0x03	; 3
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_u8_SetPinDirection>
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	64 e0       	ldi	r22, 0x04	; 4
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_u8_SetPinDirection>
  94:	08 95       	ret

00000096 <MotorA_Forward>:
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 49 01 	call	0x292	; 0x292 <DIO_u8_SetPinValue>
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 49 01 	call	0x292	; 0x292 <DIO_u8_SetPinValue>
  aa:	08 95       	ret

000000ac <MotorA_Stop>:
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	0e 94 49 01 	call	0x292	; 0x292 <DIO_u8_SetPinValue>
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 49 01 	call	0x292	; 0x292 <DIO_u8_SetPinValue>
  c0:	08 95       	ret

000000c2 <MotorB_Forward>:
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	63 e0       	ldi	r22, 0x03	; 3
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	0e 94 49 01 	call	0x292	; 0x292 <DIO_u8_SetPinValue>
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	64 e0       	ldi	r22, 0x04	; 4
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	0e 94 49 01 	call	0x292	; 0x292 <DIO_u8_SetPinValue>
  d6:	08 95       	ret

000000d8 <MotorB_Stop>:
}

void MotorB_Stop(void) {
	DIO_u8_SetPinValue(DIO_u8PORTD, IN3, DIO_u8Pin_Low);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	0e 94 49 01 	call	0x292	; 0x292 <DIO_u8_SetPinValue>
		DIO_u8_SetPinValue(DIO_u8PORTD, IN4, DIO_u8Pin_Low);
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 49 01 	call	0x292	; 0x292 <DIO_u8_SetPinValue>
  ec:	08 95       	ret

000000ee <Turn_Left>:

}

void Turn_Left(void){
	MotorA_Forward();
  ee:	0e 94 4b 00 	call	0x96	; 0x96 <MotorA_Forward>
	MotorB_Stop();
  f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <MotorB_Stop>
  f6:	08 95       	ret

000000f8 <Turn_Right>:
}
void Turn_Right(void){
	MotorB_Forward();
  f8:	0e 94 61 00 	call	0xc2	; 0xc2 <MotorB_Forward>
	MotorA_Stop();
  fc:	0e 94 56 00 	call	0xac	; 0xac <MotorA_Stop>
 100:	08 95       	ret

00000102 <Read_Left_IR>:
}

//ir sensor
u8 Read_Left_IR(void) {
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	1f 92       	push	r1
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	u8 value;
	DIO_u8_GetPinValue(DIO_u8PORTD, LEFT_IR, &value);
 10c:	ae 01       	movw	r20, r28
 10e:	4f 5f       	subi	r20, 0xFF	; 255
 110:	5f 4f       	sbci	r21, 0xFF	; 255
 112:	66 e0       	ldi	r22, 0x06	; 6
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_u8_GetPinValue>
	return value;
}
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <Read_Right_IR>:

u8 Read_Right_IR(void) {
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	1f 92       	push	r1
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	u8 value;
	DIO_u8_GetPinValue(DIO_u8PORTD, RIGHT_IR, &value);
 12e:	ae 01       	movw	r20, r28
 130:	4f 5f       	subi	r20, 0xFF	; 255
 132:	5f 4f       	sbci	r21, 0xFF	; 255
 134:	67 e0       	ldi	r22, 0x07	; 7
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 cc 01 	call	0x398	; 0x398 <DIO_u8_GetPinValue>
	return value;
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <main>:
#include "HAL/L298N/MOTOR_INTERFACE.h"
#include <util/delay.h>

int main(void) {
	L298N_Init();
 146:	0e 94 36 00 	call	0x6c	; 0x6c <L298N_Init>

	while (1) {
		u8 left_ir = Read_Left_IR();
 14a:	0e 94 81 00 	call	0x102	; 0x102 <Read_Left_IR>
 14e:	c8 2f       	mov	r28, r24
		u8 right_ir = Read_Right_IR();
 150:	0e 94 92 00 	call	0x124	; 0x124 <Read_Right_IR>

		if (left_ir == 0 && right_ir == 0) {
 154:	c1 11       	cpse	r28, r1
 156:	07 c0       	rjmp	.+14     	; 0x166 <main+0x20>
 158:	81 11       	cpse	r24, r1
 15a:	05 c0       	rjmp	.+10     	; 0x166 <main+0x20>
			// Both sensors on the line
			MotorA_Forward();
 15c:	0e 94 4b 00 	call	0x96	; 0x96 <MotorA_Forward>
			MotorB_Forward();
 160:	0e 94 61 00 	call	0xc2	; 0xc2 <MotorB_Forward>
 164:	f2 cf       	rjmp	.-28     	; 0x14a <main+0x4>
			} else if (left_ir == 0 && right_ir == 1) {
 166:	c1 11       	cpse	r28, r1
 168:	05 c0       	rjmp	.+10     	; 0x174 <main+0x2e>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	19 f4       	brne	.+6      	; 0x174 <main+0x2e>
			// Left sensor on the line, right sensor off the line
			Turn_Left();
 16e:	0e 94 77 00 	call	0xee	; 0xee <Turn_Left>
 172:	eb cf       	rjmp	.-42     	; 0x14a <main+0x4>
			} else if (left_ir == 1 && right_ir == 0) {
 174:	c1 30       	cpi	r28, 0x01	; 1
 176:	29 f4       	brne	.+10     	; 0x182 <main+0x3c>
 178:	81 11       	cpse	r24, r1
 17a:	03 c0       	rjmp	.+6      	; 0x182 <main+0x3c>
			// Left sensor off the line, right sensor on the line
			Turn_Right();
 17c:	0e 94 7c 00 	call	0xf8	; 0xf8 <Turn_Right>
 180:	e4 cf       	rjmp	.-56     	; 0x14a <main+0x4>
			} else {
			// Both sensors off the line
			MotorA_Stop();
 182:	0e 94 56 00 	call	0xac	; 0xac <MotorA_Stop>
			MotorB_Stop();
 186:	0e 94 6c 00 	call	0xd8	; 0xd8 <MotorB_Stop>
 18a:	df cf       	rjmp	.-66     	; 0x14a <main+0x4>

0000018c <DIO_u8_SetPinDirection>:
	else
	{
		Local_u8ErrorState = 1;
	}
	return Local_u8ErrorState;
}
 18c:	68 30       	cpi	r22, 0x08	; 8
 18e:	08 f0       	brcs	.+2      	; 0x192 <DIO_u8_SetPinDirection+0x6>
 190:	78 c0       	rjmp	.+240    	; 0x282 <DIO_u8_SetPinDirection+0xf6>
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	c1 f5       	brne	.+112    	; 0x206 <DIO_u8_SetPinDirection+0x7a>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	91 f0       	breq	.+36     	; 0x1be <DIO_u8_SetPinDirection+0x32>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <DIO_u8_SetPinDirection+0x1a>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	d9 f0       	breq	.+54     	; 0x1d6 <DIO_u8_SetPinDirection+0x4a>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	29 f1       	breq	.+74     	; 0x1ee <DIO_u8_SetPinDirection+0x62>
 1a4:	70 c0       	rjmp	.+224    	; 0x286 <DIO_u8_SetPinDirection+0xfa>
 1a6:	2a b3       	in	r18, 0x1a	; 26
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_u8_SetPinDirection+0x26>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_u8_SetPinDirection+0x22>
 1b6:	82 2b       	or	r24, r18
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
 1be:	27 b3       	in	r18, 0x17	; 23
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_u8_SetPinDirection+0x3e>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_u8_SetPinDirection+0x3a>
 1ce:	82 2b       	or	r24, r18
 1d0:	87 bb       	out	0x17, r24	; 23
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	08 95       	ret
 1d6:	24 b3       	in	r18, 0x14	; 20
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_u8_SetPinDirection+0x56>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_u8_SetPinDirection+0x52>
 1e6:	82 2b       	or	r24, r18
 1e8:	84 bb       	out	0x14, r24	; 20
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	21 b3       	in	r18, 0x11	; 17
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8_SetPinDirection+0x6e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8_SetPinDirection+0x6a>
 1fe:	82 2b       	or	r24, r18
 200:	81 bb       	out	0x11, r24	; 17
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	41 11       	cpse	r20, r1
 208:	40 c0       	rjmp	.+128    	; 0x28a <DIO_u8_SetPinDirection+0xfe>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	99 f0       	breq	.+38     	; 0x234 <DIO_u8_SetPinDirection+0xa8>
 20e:	28 f0       	brcs	.+10     	; 0x21a <DIO_u8_SetPinDirection+0x8e>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	e9 f0       	breq	.+58     	; 0x24e <DIO_u8_SetPinDirection+0xc2>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	41 f1       	breq	.+80     	; 0x268 <DIO_u8_SetPinDirection+0xdc>
 218:	3a c0       	rjmp	.+116    	; 0x28e <DIO_u8_SetPinDirection+0x102>
 21a:	2a b3       	in	r18, 0x1a	; 26
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_u8_SetPinDirection+0x9a>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_u8_SetPinDirection+0x96>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	8a bb       	out	0x1a, r24	; 26
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	08 95       	ret
 234:	27 b3       	in	r18, 0x17	; 23
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_u8_SetPinDirection+0xb4>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_u8_SetPinDirection+0xb0>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	87 bb       	out	0x17, r24	; 23
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
 24e:	24 b3       	in	r18, 0x14	; 20
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_u8_SetPinDirection+0xce>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_u8_SetPinDirection+0xca>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	84 bb       	out	0x14, r24	; 20
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
 268:	21 b3       	in	r18, 0x11	; 17
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_u8_SetPinDirection+0xe8>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_u8_SetPinDirection+0xe4>
 278:	80 95       	com	r24
 27a:	82 23       	and	r24, r18
 27c:	81 bb       	out	0x11, r24	; 17
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	08 95       	ret
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	08 95       	ret
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	08 95       	ret
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret

00000292 <DIO_u8_SetPinValue>:
 292:	68 30       	cpi	r22, 0x08	; 8
 294:	08 f0       	brcs	.+2      	; 0x298 <DIO_u8_SetPinValue+0x6>
 296:	78 c0       	rjmp	.+240    	; 0x388 <DIO_u8_SetPinValue+0xf6>
 298:	41 30       	cpi	r20, 0x01	; 1
 29a:	c1 f5       	brne	.+112    	; 0x30c <DIO_u8_SetPinValue+0x7a>
 29c:	81 30       	cpi	r24, 0x01	; 1
 29e:	91 f0       	breq	.+36     	; 0x2c4 <DIO_u8_SetPinValue+0x32>
 2a0:	28 f0       	brcs	.+10     	; 0x2ac <DIO_u8_SetPinValue+0x1a>
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	d9 f0       	breq	.+54     	; 0x2dc <DIO_u8_SetPinValue+0x4a>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	29 f1       	breq	.+74     	; 0x2f4 <DIO_u8_SetPinValue+0x62>
 2aa:	70 c0       	rjmp	.+224    	; 0x38c <DIO_u8_SetPinValue+0xfa>
 2ac:	2b b3       	in	r18, 0x1b	; 27
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_u8_SetPinValue+0x26>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_u8_SetPinValue+0x22>
 2bc:	82 2b       	or	r24, r18
 2be:	8b bb       	out	0x1b, r24	; 27
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
 2c4:	28 b3       	in	r18, 0x18	; 24
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_u8_SetPinValue+0x3e>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_u8_SetPinValue+0x3a>
 2d4:	82 2b       	or	r24, r18
 2d6:	88 bb       	out	0x18, r24	; 24
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret
 2dc:	25 b3       	in	r18, 0x15	; 21
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_u8_SetPinValue+0x56>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_u8_SetPinValue+0x52>
 2ec:	82 2b       	or	r24, r18
 2ee:	85 bb       	out	0x15, r24	; 21
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	08 95       	ret
 2f4:	22 b3       	in	r18, 0x12	; 18
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_u8_SetPinValue+0x6e>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_u8_SetPinValue+0x6a>
 304:	82 2b       	or	r24, r18
 306:	82 bb       	out	0x12, r24	; 18
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret
 30c:	41 11       	cpse	r20, r1
 30e:	40 c0       	rjmp	.+128    	; 0x390 <DIO_u8_SetPinValue+0xfe>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	99 f0       	breq	.+38     	; 0x33a <DIO_u8_SetPinValue+0xa8>
 314:	28 f0       	brcs	.+10     	; 0x320 <DIO_u8_SetPinValue+0x8e>
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	e9 f0       	breq	.+58     	; 0x354 <DIO_u8_SetPinValue+0xc2>
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	41 f1       	breq	.+80     	; 0x36e <DIO_u8_SetPinValue+0xdc>
 31e:	3a c0       	rjmp	.+116    	; 0x394 <DIO_u8_SetPinValue+0x102>
 320:	2b b3       	in	r18, 0x1b	; 27
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_u8_SetPinValue+0x9a>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_u8_SetPinValue+0x96>
 330:	80 95       	com	r24
 332:	82 23       	and	r24, r18
 334:	8b bb       	out	0x1b, r24	; 27
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret
 33a:	28 b3       	in	r18, 0x18	; 24
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_u8_SetPinValue+0xb4>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_u8_SetPinValue+0xb0>
 34a:	80 95       	com	r24
 34c:	82 23       	and	r24, r18
 34e:	88 bb       	out	0x18, r24	; 24
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret
 354:	25 b3       	in	r18, 0x15	; 21
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_u8_SetPinValue+0xce>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_u8_SetPinValue+0xca>
 364:	80 95       	com	r24
 366:	82 23       	and	r24, r18
 368:	85 bb       	out	0x15, r24	; 21
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	08 95       	ret
 36e:	22 b3       	in	r18, 0x12	; 18
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_u8_SetPinValue+0xe8>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_u8_SetPinValue+0xe4>
 37e:	80 95       	com	r24
 380:	82 23       	and	r24, r18
 382:	82 bb       	out	0x12, r24	; 18
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	08 95       	ret
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	08 95       	ret
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	08 95       	ret
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	08 95       	ret

00000398 <DIO_u8_GetPinValue>:

u8 DIO_u8_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_pu8Value)
{
	u8 Local_u8ErrorState = 0;
	if ((Copy_u8Pin <= DIO_u8Pin7) && (Copy_u8Pin >= DIO_u8Pin0) && (Copy_pu8Value != NULL))
 398:	68 30       	cpi	r22, 0x08	; 8
 39a:	d8 f5       	brcc	.+118    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 39c:	41 15       	cp	r20, r1
 39e:	51 05       	cpc	r21, r1
 3a0:	d1 f1       	breq	.+116    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		switch (Copy_u8Port)
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	91 f0       	breq	.+36     	; 0x3ca <DIO_u8_GetPinValue+0x32>
 3a6:	28 f0       	brcs	.+10     	; 0x3b2 <DIO_u8_GetPinValue+0x1a>
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	d9 f0       	breq	.+54     	; 0x3e2 <DIO_u8_GetPinValue+0x4a>
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	29 f1       	breq	.+74     	; 0x3fa <DIO_u8_GetPinValue+0x62>
 3b0:	34 c0       	rjmp	.+104    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		{
			case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
 3b2:	89 b3       	in	r24, 0x19	; 25
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_u8_GetPinValue+0x24>
 3b8:	95 95       	asr	r25
 3ba:	87 95       	ror	r24
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_u8_GetPinValue+0x20>
 3c0:	81 70       	andi	r24, 0x01	; 1
 3c2:	fa 01       	movw	r30, r20
 3c4:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

u8 DIO_u8_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_pu8Value)
{
	u8 Local_u8ErrorState = 0;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
	if ((Copy_u8Pin <= DIO_u8Pin7) && (Copy_u8Pin >= DIO_u8Pin0) && (Copy_pu8Value != NULL))
	{
		switch (Copy_u8Port)
		{
			case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
 3c8:	08 95       	ret
			case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
 3ca:	86 b3       	in	r24, 0x16	; 22
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_u8_GetPinValue+0x3c>
 3d0:	95 95       	asr	r25
 3d2:	87 95       	ror	r24
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_u8_GetPinValue+0x38>
 3d8:	81 70       	andi	r24, 0x01	; 1
 3da:	fa 01       	movw	r30, r20
 3dc:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

u8 DIO_u8_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_pu8Value)
{
	u8 Local_u8ErrorState = 0;
 3de:	80 e0       	ldi	r24, 0x00	; 0
	if ((Copy_u8Pin <= DIO_u8Pin7) && (Copy_u8Pin >= DIO_u8Pin0) && (Copy_pu8Value != NULL))
	{
		switch (Copy_u8Port)
		{
			case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
			case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
 3e0:	08 95       	ret
			case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
 3e2:	83 b3       	in	r24, 0x13	; 19
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8_GetPinValue+0x54>
 3e8:	95 95       	asr	r25
 3ea:	87 95       	ror	r24
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8_GetPinValue+0x50>
 3f0:	81 70       	andi	r24, 0x01	; 1
 3f2:	fa 01       	movw	r30, r20
 3f4:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

u8 DIO_u8_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_pu8Value)
{
	u8 Local_u8ErrorState = 0;
 3f6:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (Copy_u8Port)
		{
			case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
			case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
			case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
 3f8:	08 95       	ret
			case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
 3fa:	80 b3       	in	r24, 0x10	; 16
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	95 95       	asr	r25
 402:	87 95       	ror	r24
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	81 70       	andi	r24, 0x01	; 1
 40a:	fa 01       	movw	r30, r20
 40c:	80 83       	st	Z, r24
	return Local_u8ErrorState;
}

u8 DIO_u8_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_pu8Value)
{
	u8 Local_u8ErrorState = 0;
 40e:	80 e0       	ldi	r24, 0x00	; 0
		switch (Copy_u8Port)
		{
			case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
			case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
			case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
			case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
 410:	08 95       	ret
			default: Local_u8ErrorState = 1;
		}
	}
	else
	{
		Local_u8ErrorState = 1;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	08 95       	ret
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	08 95       	ret
		{
			case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
			case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
			case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
			case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
			default: Local_u8ErrorState = 1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		Local_u8ErrorState = 1;
	}
	return Local_u8ErrorState;
 41c:	08 95       	ret

0000041e <_exit>:
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
